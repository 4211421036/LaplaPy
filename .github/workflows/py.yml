name: Release to PyPI & GitHub

on:
  push:
    branches:
      - main

permissions:
  contents: write
  deployments: write
  id-token: write

jobs:
  build_publish_and_release:
    runs-on: ubuntu-latest
    environment: pypi

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read package metadata
        id: metadata
        run: |
          VERSION=$(grep '^version' pyproject.toml | head -1 | sed -E 's/version *= *"(.*)"/\1/')
          NAME=$(grep '^name' pyproject.toml | head -1 | sed -E 's/name *= *"(.*)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$NAME" >> $GITHUB_OUTPUT

      - name: Start PyPI Deployment
        id: create-deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'pypi',
              auto_merge: false,
              required_contexts: [],
              transient_environment: true,
            });
            return deployment.data.id;
          result-encoding: string

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build & twine
        run: |
          python -m pip install --upgrade pip build twine

      - name: Build sdist & wheel
        run: python -m build --sdist --wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload --skip-existing dist/*

      - name: Update Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create-deployment.outputs.result }},
              state: 'success',
              environment_url: 'https://pypi.org/project/${{ steps.metadata.outputs.PACKAGE_NAME }}/'
            });

      - name: Create & push tag
        id: create-tag
        run: |
          TAG="v${{ steps.metadata.outputs.VERSION }}"
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists â€“ skipping creation."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "$TAG"
            git push origin "$TAG"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Draft GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create-tag.outputs.TAG }}
          name: "LaplaPy ${{ steps.metadata.outputs.VERSION }}"
          body: |
            # LaplaPy ${{ steps.metadata.outputs.VERSION }}

            ðŸŽ‰ Released **LaplaPy v${{ steps.metadata.outputs.VERSION }}** to PyPI!

            **PyPI Package**: https://pypi.org/project/${{ steps.metadata.outputs.PACKAGE_NAME }}/

            ## Overview

            **LaplaPy** is a professional-grade Python library for symbolic Laplace transform analysis and ODE solving.

            ## What's New

            [View full changelog](https://github.com/4211421036/LaplaPy/blob/main/CHANGELOG.md)

            ## Quick Install

            ```bash
            pip install LaplaPy==${{ steps.metadata.outputs.VERSION }}
            ```

            ## Features

            - Symbolic Laplace transforms with ROC analysis
            - ODE solving via Laplace methods
            - Control system analysis tools
            - Step-by-step educational modes

            [Read the documentation](https://github.com/4211421036/LaplaPy#readme)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
